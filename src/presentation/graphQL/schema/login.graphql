type AccessToken {
  token: String!
}

type RefreshToken {
  id: String!
  created: DateTime
  modified: DateTime
  token: String!
  expiration: DateTime
  revoked: Boolean
  associatedLoginId: String
  associatedDeviceId: String
}

# TODO: add currentUserId
type Login {
  id: ID!
  created: DateTime!
  modified: DateTime!
  email: String!
  users: [User]
}

union SignUpResult = SignUpSuccess | SignUpProblem

type SignUpSuccess {
  sessionId: String!
  accessToken: AccessToken!
  refreshToken: RefreshToken!
}

type SignUpProblem {
  "translated message encompassing all invalid inputs."
  title: String!
  invalidInputs: [SignUpInvalidInput]
}

enum SignUpInvalidInputField {
  EMAIL
  PASSWORD
  FULL_NAME
}

type SignUpInvalidInput {
  field: SignUpInvalidInputField!
  "translated message."
  message: String!
}


union SignInResult = SignInSuccess | SignInProblem

type SignInSuccess {
  sessionId: String!
  accessToken: AccessToken!
  refreshToken: RefreshToken!
}

type SignInProblem {
  "translated message encompassing all invalid inputs."
  title: String!
  invalidInputs: [SignInInvalidInput]
}

enum SignInInvalidInputField {
  EMAIL
  PASSWORD
}

type SignInInvalidInput {
  field: SignInInvalidInputField!
  "translated message."
  message: String!
}


extend type Mutation {
  signUp(email: String!, password: String!, fullName: String!): SignUpResult
  signIn(email: String!, password: String!): SignInResult
#  TODO: deleteLogin(id: ID!): Boolean!
}

