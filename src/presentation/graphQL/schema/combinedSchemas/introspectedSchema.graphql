# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

union CreateReminderResult = CreateReminderProblem | CreateReminderSuccess

union SignInResult = SignInProblem | SignInSuccess

union SignUpResult = SignUpProblem | SignUpSuccess

type AccessToken {
    token: String!
}

type CreateReminderInvalidInput {
    field: CreateReminderInvalidInputField!
    "translated message."
    message: String!
}

type CreateReminderProblem {
    invalidInputs: [CreateReminderInvalidInput]
    title: String!
}

type CreateReminderSuccess {
    createdReminder: Reminder!
}

type Login {
    created: DateTime!
    email: String!
    id: ID!
    modified: DateTime!
    users: [User]
}

type Mutation {
    _empty: String
    createReminder(dateTimeToRemind: DateTime!, title: String!): CreateReminderResult
    deleteReminder(id: ID!): Boolean!
    deleteUser(id: ID!): Boolean!
    signIn(email: String!, password: String!): SignInResult
    signUp(email: String!, fullName: String!, password: String!): SignUpResult
}

type Query {
    _empty: String
    me: User
    myReminders: [Reminder]
    reminder(id: ID!): Reminder
    reminders: [Reminder]
    remindersByOwner(ownerId: ID!): [Reminder!]
    user(id: ID!): User
    users: [User]
}

type RefreshToken {
    associatedDeviceId: String
    associatedLoginId: String
    created: DateTime
    expiration: DateTime
    id: String!
    modified: DateTime
    revoked: Boolean
    token: String!
}

type Reminder {
    created: DateTime!
    dateTimeToRemind: DateTime
    id: ID!
    isCompleted: Boolean
    modified: DateTime!
    owner: User
    title: String
    usersToRemind: [User]
}

type SignInInvalidInput {
    field: SignInInvalidInputField!
    "translated message."
    message: String!
}

type SignInProblem {
    invalidInputs: [SignInInvalidInput]
    "translated message encompassing all invalid inputs."
    title: String!
}

type SignInSuccess {
    accessToken: AccessToken!
    refreshToken: RefreshToken!
    sessionId: String!
}

type SignUpInvalidInput {
    field: SignUpInvalidInputField!
    "translated message."
    message: String!
}

type SignUpProblem {
    invalidInputs: [SignUpInvalidInput]
    "translated message encompassing all invalid inputs."
    title: String!
}

type SignUpSuccess {
    accessToken: AccessToken!
    refreshToken: RefreshToken!
    sessionId: String!
}

type Subscription {
    _empty: Boolean
}

type User {
    created: DateTime!
    fullName: String
    id: ID!
    login: Login!
    modified: DateTime!
    reminders: [Reminder]
    role: String!
}

enum CreateReminderInvalidInputField {
    DATETIME
    TITLE
}

enum SignInInvalidInputField {
    EMAIL
    PASSWORD
}

enum SignUpInvalidInputField {
    EMAIL
    FULL_NAME
    PASSWORD
}

"Date custom scalar type including time"
scalar DateTime
