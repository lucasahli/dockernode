services:
  redis:
    image: redis/redis-stack:latest
    container_name: rediscontainer
    ports:
      - "6379"
    networks:
      - backend
    volumes:
      - ./redis_data/:/data
    expose:
      - 6379
    restart: always

  reminder-backend:
    image: "lucasahli/reminder-backend:<IMAGE_TAG>"
    ports: # port_on_host_machine:port_on_container
      - "4000:4000"
    expose:
      - "3000" # Expose the internal port for Nginx to connect
    environment:
      - FIREBASE_SERVICE_ACCOUNT_KEY=${FIREBASE_SERVICE_ACCOUNT_KEY}
      - HASH_SECRET=${HASH_SECRET}
      - API_SERVER_PORT=4000
      - REDIS_HOST=rediscontainer
      - REDIS_PORT=6379
      - NODE_OPTIONS='--experimental-vm-modules'
    networks:
      - backend
    depends_on:
      - redis
    restart: always

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    ports:
      - "80:80"     # HTTP (for Certbot's initial challenge)
      - "443:443"   # HTTPS
    volumes:
      - ./certificates:/etc/letsencrypt            # SSL certificates
      - ./webroot:/var/www/html                    # Webroot for Certbot
      - ./certbot:/var/www/certbot # Ensure Certbot can access challenge files here
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost" ]
      interval: 30s
      retries: 5
    networks:
      - backend
    depends_on:
      - reminder-backend

  certbot:
    image: certbot/certbot
    container_name: certbot
    networks:
      - backend
    volumes:
      - ./certificates:/etc/letsencrypt            # SSL certificates
      - ./webroot:/var/www/html                    # Webroot for Certbot
      - ./certbot:/var/www/certbot # Ensure Certbot can access challenge files here
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do sleep 6h & wait $!; certbot renew --webroot -w /var/www/html && docker-compose restart nginx; done;'"
    depends_on:
      - nginx
      - reminder-backend

networks:
  backend: